{
  "name": "alexa-app",
  "version": "2.1.0",
  "description": "A module to simplify creation of Alexa (Amazon Echo) apps (Skills) using Node.js",
  "main": "index.js",
  "author": {
    "name": "Matt Kruse",
    "email": "github@mattkruse.com",
    "url": "http://MattKruse.com"
  },
  "keywords": [
    "amazon",
    "echo",
    "alexa",
    "skills"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/matt-kruse/alexa-app.git"
  },
  "bugs": {
    "url": "https://github.com/matt-kruse/alexa-app/issues"
  },
  "license": "MIT",
  "dependencies": {
    "bluebird": "^2.9.30",
    "js-combinatorics": "^0.5.0",
    "numbered": "^1.0.0"
  },
  "readme": "# alexa-app\r\n\r\nA Node module to simplify development of Alexa apps (Skills) using Node.js\r\n\r\n# Installation\r\n\r\n```bash\r\n\tnpm install alexa-app --save\r\n```\r\n\r\n# Example Web App\r\n\r\nThe *[alexa-app-server](https://github.com/matt-kruse/alexa-app-server/)* project is a fully working example of using alexa-app to build an Alexa application using Node.js and Express.\r\n\r\n*(alexa-app-server need to be updated to be compatible with alexa-app 2.0)*\r\n\r\n# Summary\r\n\r\nalexa-app does the dirty work of interpretting the JSON request from Amazon and building the JSON response. It provides convenience methods to more easily build the response, handle session objects, and add cards. It also makes it easy to run multiple endpoints (apps) on one Node.js server instance.\r\n\r\nAfter defining your application's behavior, your caller (Express, Lambda, etc) should call the app.request() method, and pass the Alexa JSON request object. It will return a promise containing the response JSON. Your caller should then insert that into its response, whatever form it may take (see examples below).\r\n\r\nThe intent schema definition and sample utterances can be included in your application's definition, making it very simple to generate hundreds (or thousands!) or sample utterances with a few lines.\r\n\r\nNOTE: alexa-app makes no assumptions about what context it is running in. It will run in a stand-alone Node.js app, within an HTTPS server, within an AWS Lambda function, etc. It only cares about JSON in and JSON out. It is agnostic about the environment that is using it, but it provides some convenience methods to hook into common environments.\r\n\r\n# Features\r\n\r\n- Simplified handling of requests and generating responses\r\n- Asynchronous handlers supported\r\n- Easy connection into AWS Lambda or Node.js express (and can be connected to any other server)\r\n- Auto-generation of intent schema and sample utterances\r\n- Easier handling of session data\r\n- Apps can be tested without running a server\r\n\r\n# Example Usage\r\n\r\nSee the *example* directory for sample implementations.\r\n\r\n```javascript\r\nvar alexa = require('alexa-app');\r\nvar app = new alexa.app('sample');\r\n\r\napp.intent('number',\r\n  {\r\n    \"slots\":{\"number\":\"NUMBER\"}\r\n\t,\"utterances\":[ \"say the number {1-100|number}\" ]\r\n  },\r\n  function(request,response) {\r\n    var number = request.slot('number');\r\n    response.say(\"You asked for the number \"+number);\r\n  }\r\n);\r\n\r\n// Manually hook the handler function into express\r\nexpress.post('/sample',function(req,res) {\r\n  app.request(req.body)        // connect express to alexa-app\r\n    .then(function(response) { // alexa-app returns a promise with the response\r\n      res.json(response);      // stream it to express' output\r\n    });\r\n});\r\n```\r\n\r\n# API\r\n\r\nApps (\"skills\") define handlers for launch, intent, and session end, just like normal Alexa development. The alexa-app module provides a layer around this functionality that simplifies the interaction. Each handler gets passed a request and response object, which are custom objects for this module.\r\n\r\n## request\r\n\r\n```javascript\r\n// Return the type of request received (LaunchRequest, IntentRequest, SessionEndedRequest)\r\nString request.type()\r\n\r\n// Return the value passed in for a given slot name\r\nString request.slot('slotName')\r\n\r\n// Return the value of a session variable\r\nString request.session('attributeName')\r\n\r\n// Session details, as passed by Amazon in the request\r\nrequest.sessionDetails = { ... }\r\n\r\n// The raw request JSON object\r\nrequest.data\r\n```\r\n\r\n## response\r\n\r\nThe response JSON object is automatically built for you. All you need to do is tell it what you want to output.\r\n\r\n```javascript\r\n// Tell Alexa to say something. Multiple calls to say() will be appended to each other\r\nresponse.say(String phrase)\r\n\r\n// Empty the response text\r\nresponse.clear()\r\n\r\n// Tell Alexa to re-prompt the user for a response, if it didn't hear anything valid\r\nresponse.reprompt(String phrase)\r\n\r\n// Return a card to the user's Echo app\r\nresponse.card(String title, String content [, String subtitle] )\r\n\r\n// Tell Alexa whether the user's session is over. By default, sessions end.\r\n// You can optionally pass a reprompt message\r\nresponse.shouldEndSession(boolean end [, String reprompt] )\r\n\r\n// Set a session variable\r\n// By defailt, Alexa only persists session variables to the next request. The alexa-app module \r\n// makes session variables persist across multiple requests.\r\nresponse.session(String attributeName, String attributeValue)\r\n\r\n// Send the response as success\r\n// You don't usually need to call this. This is only required if your handler is \r\n// asynchronous - for example, if it makes an http request and needs to wait for\r\n// the response, then send it back to Alexa when finished.\r\nresponse.send()\r\n\r\n// Trigger a response failure\r\n// The internal promise containing the response will be rejected, and should be handled by\r\n// the calling environment. Instead of the Alexa response being returned, the failure\r\n// message will be passed.\r\nresponse.fail(String message)\r\n\r\n// Calls to response can be chained together\r\nresponse.say(\"OK\").send();\r\n```\r\n\r\n# Request Handlers\r\n\r\nYour app can define a single handler for the Launch event and the SessionEnded event, and multiple Intent handlers.\r\n\r\n## LaunchRequest\r\n\r\n```javascript\r\napp.launch(function(request,response) {\r\n  response.say(\"Hello World\");\r\n  response.card(\"Hello World\",\"This is an example card\");\r\n});\r\n```\r\n\r\n## IntentRequest\r\n\r\nDefine the handler for multiple intents using multiple calls to intent(). Intent schema and sample utterances can also be passed to intent(), which is detailed below. Intent handlers that don't return an immediate response (because they do some asynchronous operation) must return false. See example further below.\r\n\r\n```javascript\r\napp.intent('buy', function(request,response) {\r\n\tresponse.say(\"You bought a \"+request.slot(\"item\"));\r\n});\r\napp.intent('sell', function(request,response) {\r\n\tresponse.say(\"You sold your items!\");\r\n});\r\n```\r\n\r\n## SessionEndRequest\r\n\r\n```javascript\r\napp.sessionEnded(function(request,response) {\r\n    // Clean up the user's server-side stuff, if necessary\r\n\tlogout( request.userId );\r\n\t// No response necessary\r\n});\r\n```\r\n\r\n# Execute Code On Every Request\r\n\r\nIn addition to specific event handlers, you can define functions that will run on every request. \r\n\r\n## pre()\r\n\r\nExecuted before any event handlers. This is useful to setup new sessions, validate the applicationId, or do any other kind of validations.\r\n\r\n```javascript\r\napp.pre = function(request,response,type) {\r\n\tif (request.session.application.applicationId!=\"amzn1.echo-sdk-ams.app.000000-d0ed-0000-ad00-000000d00ebe\") {\r\n\t\t// Fail ungracefully\r\n\t\tresponse.fail(\"Invalid applicationId\");\r\n\t}\r\n};\r\n```\r\n\r\nNote: The post() method still gets called, even if the pre() function calls send() or fail(). The post method can always override anything done before it.\r\n\r\n## post()\r\n\r\nThe last thing executed for every request. It is even called if there is an exception or if a response has already been sent. The post() function can change anything about the response. It can even turn a response.fail() into a respond.send() with entirely new content. If post() is called after an exception is thrown, the exception itself will be the last argument.\r\n\r\n```javascript\r\napp.post = function(request,response,type,exception) {\r\n\t// Always turn an exception into a successful response\r\n\tresponse.clear().say(\"An error occured: \"+exception).send();\r\n};\r\n```\r\n\r\n# Schema and Utterances\r\n\r\nalexa-app makes it easy to define your intent schema and generate many sample utterances. Optionally pass your schema definition along with your intent handler, and extract the generated content using the schema() and utterances() functions on your app.\r\n\r\n## Schema Syntax\r\n\r\nPass an object with two properties: slots and utterances.\r\n\r\n```javascript\r\napp.intent('sampleIntent',\r\n\t{\r\n\t\t\"slots\":{\"NAME\":\"LITERAL\",\"AGE\":\"NUMBER\"}, \r\n\t\t\"utterances\":[ \"my {name is|name's} {names|NAME} and {I am|I'm} {1-100|AGE}{ years old|}\" ]\r\n\t},\r\n\tfunction(request,response) { ... }\r\n);\r\n```\r\n\r\n### slots\r\n\r\nThe slots object is a simple Name:Type mapping. The type must be one of Amazon's supported slot types: LITERAL, NUMBER, DATE, TIME, DURATION\r\n\r\n### utterances\r\n\r\nThe utterances syntax allows you to generate many (hundreds or even thousands) of sample utterances using just a few samples that get auto-expanded. Any number of sample utterances may be passed in the utterances array. Below are some sample utterances macros and what they will be expanded to.\r\n\r\n#### Multiple Options mapped to a Slot\r\n```javascript\r\n\"my favorite color is {red|green|blue|NAME}\"\r\n=>\r\n\"my favorite color is {red|NAME}\"\r\n\"my favorite color is {green|NAME}\"\r\n\"my favorite color is {blue|NAME}\"\r\n```\r\n\r\n#### Generate Multiple Versions of Static Text\r\n\r\nThis lets you define multiple ways to say a phrase, but combined into a single sample utterance\r\n\r\n```javascript\r\n\"{what is the|what's the|check the} status\"\r\n=>\r\n\"what is the status\"\r\n\"what's the status\"\r\n\"check the status\"\r\n```\r\n\r\n#### Auto-Generated Number Ranges\r\n\r\nWhen capturing a numeric slot value, it's helpful to generate many sample utterances with different number values\r\n\r\n```javascript\r\n\"buy {2-5|NUMBER} items\"\r\n=>\r\n\"buy {two|NUMBER} items\"\r\n\"buy {three|NUMBER} items\"\r\n\"buy {four|NUMBER} items\"\r\n\"buy {five|NUMBER} items\"\r\n```\r\n\r\nNumber ranges can also increment in steps\r\n\r\n```javascript\r\n\"buy {5-20 by 5|NUMBER} items\"\r\n=>\r\n\"buy {five|NUMBER} items\"\r\n\"buy {ten|NUMBER} items\"\r\n\"buy {fifteen|NUMBER} items\"\r\n\"buy {twenty|NUMBER} items\"\r\n```\r\n\r\n#### Optional Words\r\n\r\n```javascript\r\n\"what is your {favorite |}color\"\r\n=>\r\n\"what is your color\"\r\n\"what is your favorite color\"\r\n```\r\n\r\n#### Using a Dictionary\r\n\r\nSeveral intents may use the same list of possible values, so you want to define them in one place, not in each intent schema. Use the app's dictionary.\r\n\r\n```javascript\r\napp.dictionary = {\"colors\":[\"red\",\"green\",\"blue\"]};\r\n...\r\n\"my favorite color is {colors|FAVEORITE_COLOR}\"\r\n\"I like {colors|COLOR}\"\r\n```\r\n\r\n## Generating Schema and Utterances Output\r\n\r\nTo get the generated content out of your app, call the schema() and utterances() functions. See examples/express.js for one way to output this data.\r\n\r\n```javascript\r\n// Returns a String representation of the JSON object\r\napp.schema() =>\r\n\r\n{\r\n  \"intents\": [\r\n    {\r\n      \"intent\": \"MyColorIsIntent\",\r\n      \"slots\": [\r\n        {\r\n          \"name\": \"Color\",\r\n          \"type\": \"LITERAL\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\napp.utterances() =>\r\n\r\nMyColorIsIntent  my color is {dark brown|Color}\r\nMyColorIsIntent  my color is {green|Color}\r\nMyColorIsIntent  my favorite color is {red|Color}\r\nMyColorIsIntent  my favorite color is {navy blue|Color}\r\nWhatsMyColorIntent whats my color\r\nWhatsMyColorIntent what is my color\r\nWhatsMyColorIntent say my color\r\nWhatsMyColorIntent tell me my color\r\nWhatsMyColorIntent whats my favorite color\r\nWhatsMyColorIntent what is my favorite color\r\nWhatsMyColorIntent say my favorite color\r\nWhatsMyColorIntent tell me my favorite color\r\nWhatsMyColorIntent tell me what my favorite color is\r\n\r\n```\r\n\r\n# Error Handling\r\n\r\nHandler functions should not throw exceptions. Ideally, you should catch errors in your handlers using try/catch and respond with an appropriate output to the user. If exceptions do leak out of handlers, they will be thrown by default. Any exceptions can be handled by a generic error handler which you can define for your app. Error handlers cannot be asynchronous.\r\n\r\n```javascript\r\napp.error = function(exception, request, response) {\r\n    response.say(\"Sorry, something bad happened\");\r\n};\r\n```\r\n\r\nIf you do want exceptions to bubble out to the caller (and potentially cause Express to crash, for example), you can throw the exception.\r\n\r\n```javascript\r\napp.error = function(exception, request, response) {\r\n    console.log(exception);\r\n\tthrow exception;\r\n};\r\n```\r\n\r\n# Examples\r\n\r\n## Asynchronous Intent Handler\r\n\r\nIf an intent handler will return a response later, it must return false. This tells the alexa-app library not to send the response automatically. In this case, the handler function must manually call response.send() to finish the response.\r\n\r\n```javascript\r\napp.intent('checkStatus', function(request,response) {\r\n    http.get(\"http://server.com/status.html\", function(res) {\r\n        // This is async and will run after the http call returns\r\n\t    response.say(res.statusText);\r\n        // Must call send to end the original request\r\n        response.send();\r\n    });\r\n    // Return false immediately so alexa-app doesn't send the response\r\n    return false;\r\n});\r\n```\r\n\r\n## Connect to AWS Lambda\r\n\r\nAmazon has documentation on how to setup your Alexa app to run in AWS Lambda. To expose your alexa-app to Lambda, use the lambda() function. See example/lambda.js.\r\n\r\n```javascript\r\nvar app = new alexa.app('sample');\r\napp.intent( ... );\r\n// Connect the alexa-app to AWS Lambda\r\nexports.handler = app.lambda();\r\n```\r\n\r\n## Connect to Express\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar alexa = require('alexa-app');\r\nvar bodyParser = require('body-parser');\r\n\r\nvar express_app = express();\r\n\r\nvar app = new alexa.app('sample');\r\napp.launch(function(request,response) {\r\n\tresponse.say(\"Hello World\");\r\n});\r\n\r\n// This call defines a post() and optionally a get() handler in express, mapped to the alexa-app\r\n// express_app: The express app instance to map to\r\n// path: The path prefix to map to\r\n// enableDebug: If false, don't mapy a GET handler. Default: true\r\n//    Debugging GET requests call express' render() method using 'test'\r\napp.express( express_app, \"/echo/\", false );\r\n\r\n// Now POST calls to /echo/sample in express will be handled by the app.request() function.\r\n// GET calls will not be handled\r\n\r\n```\r\n\r\n## Customizing Default Error Messages\r\n\r\n```javascript\r\napp.messages.NO_INTENT_FOUND = \"Why you called dat intent? I don't know bout dat\";\r\n```\r\n\r\nSee the code for default messages you can override.\r\n\r\n## Read/write session data\r\n\r\n```javascript\r\napp.launch(function(request,response) {\r\n\tresponse.session('number',42);\r\n\tresponse.say(\"Would you like to know the number?\");\r\n\tresponse.shouldEndSession(false);\r\n});\r\napp.intent('tellme', function(request,response) {\r\n\tresponse.say(\"The number is \"+request.session('number'));\r\n\t// Clear only the 'number' attribute from the session\r\n\tresponse.clearSesssion('number');\r\n});\r\n// The session variables can be entirely cleared, or cleared by key\r\napp.intent('clear', function(request,response) {\r\n\tresponse.clearSession(); // or: response.clearSession('key') to clear a single value\r\n\tresponse.say(\"Session cleared!\");\r\n});\r\n```\r\n\r\nBy default, alexa-app will persist every request session attribute into the response. This way, any session attributes you set will be sent on every subsequent request, as is typical in most web programming environments. If you wish to disable this feature, you can do so.\r\n\r\n```javascript\r\nvar app = new alexa.app('test');\r\napp.persistentSession = false;\r\n```\r\n\r\n## Define a custom endpoint name for an app\r\n\r\nWhen mapped to express, the default endpoint for each app is the name of the app. You can customize this using the second parameter to the app() method.\r\n\r\n```javascript\r\nvar app = new alexa.app('hello','myEndpointName');\r\n```\r\n\r\n## Accessing All Defined Apps\r\n\r\nAll named apps can be found in the alexa.apps object, keyed by name. The value is the app itself.\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "alexa-app@2.1.0",
  "_from": "alexa-app@"
}
